blueprint:
  name: Rollo-Steuerung basierend auf Wecker, Sonnenstand und Sensoren
  description: Automatisiere Rollos basierend auf Sonnenstand, Wecker, Temperatur und anderen Sensoren.
  domain: automation
  input:
    # Abschnitt 1: Auswahl des Rollos
    rollo:
      name: Rollo oder Area
      selector:
        target:
          entity:
            domain: cover

    # Abschnitt 2: Auswahl eines Sonnenpositionssensors
    sonnensensor:
      name: Sonnenpositionssensor
      selector:
        entity:
          domain: binary_sensor

    # Abschnitt 3: Einstellung der Weckzeit mit input_datetime
    weckerzeit_1:
      name: Weckzeit 1
      selector:
        entity:
          domain: input_datetime

    wecker_1_aktiv:
      name: Wecker 1 aktiv
      selector:
        entity:
          domain: input_boolean

    weckerzeit_2:
      name: Weckzeit 2
      selector:
        entity:
          domain: input_datetime

    wecker_2_aktiv:
      name: Wecker 1 aktiv
      selector:
        entity:
          domain: input_boolean

    # Abschnitt 4: Verzögerung für Sonnenaufgang (kann positiv oder negativ sein)
    Sensor_next_sonnenuntergang:
      name: Sonnenuntergang
      selector:
        entity:
          domain: sensor

    verzögerung_sonnenaufgang:
      name: Verzögerung für Sonnenaufgang (in Minuten)
      selector:
        number:
          min: -120
          max: 120
          unit_of_measurement: "Minuten"
          mode: box

    # Abschnitt 5: Verzögerung für Sonnenuntergang (kann positiv oder negativ sein)
    Sensor_next_sonnenaufgang:
      name: Sonnenaufgang
      selector:
        entity:
          domain: sensor

    verzögerung_sonnenuntergang:
      name: Verzögerung für Sonnenuntergang (in Minuten)
      selector:
        number:
          min: -120
          max: 120
          unit_of_measurement: "Minuten"
          mode: box

    # Abschnitt 6: Fensterkontakt
    fensterkontakt:
      name: Fensterkontaktsensor
      selector:
        entity:
          domain: binary_sensor
          device_class: opening

    # Abschnitt 7: Temperaturbasierte Automatisierung
    innen_temperatur:
      name: Innentemperatursensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    außen_temperatur:
      name: Außentemperatursensor
      selector:
        entity:
          domain: sensor
          device_class: temperature

    wetterbericht:
      name: Wetterbericht
      selector:
        entity:
          domain: weather

    sommer_temperatur:
      name: Sommer-Temperaturschwelle
      selector:
        number:
          min: 10
          max: 35
          unit_of_measurement: "°C"
          mode: box

    winter_temperatur:
      name: Winter-Temperaturschwelle
      selector:
        number:
          min: -10
          max: 20
          unit_of_measurement: "°C"
          mode: box

    # Abschnitt 8: Weitere Trigger (wie in einer normalen Automation)
    weitere_open_trigger:
      name: Weitere Trigger zum öffnen
      selector:
        trigger: {}

    weitere_close_trigger:
      name: Weitere Trigger zum schließen
      selector:
        trigger: { }

    # Abschnitt 9: Aktionen bei Rollo-Öffnen oder -Schließen
    aktion_bei_öffnen:
      name: Aktion bei Rollo-Öffnen
      selector:
        action: {}

    aktion_bei_schließen:
      name: Aktion bei Rollo-Schließen
      selector:
        action: {}

    # Abschnitt 10: Benachrichtigungen
    benachrichtigungsgerät:
      name: Benachrichtigungsgerät
      selector:
        device:
          integration: mobile_app

trigger:
  # Trigger für die Weckzeit Luke
  - platform: template
    value_template: >
    ## hier soll die frühste Uhrzeit/ Wecker als Trigger genutzt werden, wenn diese aktiv sind

  #trigger  für Fensterko


  # Weitere Trigger
  - !input weitere_trigger

condition:
  # Bedingung für den Fensterkontaktsensor
  - condition: state
    entity_id: !input fensterkontakt
    state: 'on'

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == sonnensensor }}"
        sequence:
          - service: cover.close_cover
            target: !input rollo

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == 'input_datetime.weckerzeit_luke' }}"
        sequence:
          - service: cover.open_cover
            target: !input rollo

      - conditions:
          - condition: template
            value_template: "{{ trigger.entity_id == fensterkontakt and trigger.to_state.state == 'on' }}"
        sequence:
          - service: cover.open_cover
            target: !input rollo

  - service: notify.notify
    target: !input benachrichtigungsgerät
    data:
      message: >
        {{ trigger.entity_id }} hat das Rollo geöffnet/geschlossen, weil {{ trigger.to_state.state }}
